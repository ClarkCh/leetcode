# 给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
# 说明：每次只能向下或者向右移动一步。
# 示例:
# 输入:
# [
#   [1,3,1],
#   [1,5,1],
#   [4,2,1]
# ]
# 输出: 7
# 解释: 因为路径 1→3→1→1→1 的总和最小。
# def minPathSum(self, grid: List[List[int]]) -> int:


# 思路：这是一道典型的要使用动态规划的题目, 原因是这道题中前后的数字是有关联的
# 并且涉及最优选择, 所以这里可以使用动态规划的算法思想
# 并且我将使用自底向上的思路进行解答


class Solution:
    def minPathSum(self, grid):
        if grid == []:
            return 0
        d = len(grid)
        b = len(grid[0])
        for i in range(1, d):
            grid[i][0] += grid[i-1][0]
        for j in range(1, b):
            grid[0][j] += grid[0][j-1]
        for i in range(1, d):
            for j in range(1, b):
                grid[i][j] += min(grid[i-1][j], grid[i][j-1])
        return grid[-1][-1]
