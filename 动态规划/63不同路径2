# 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
# 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
# 现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
# 网格中的障碍物和空位置分别用 1 和 0 来表示。
# 说明：m 和 n 的值均不超过 100。
# 示例 1:
# 输入:
# [
#   [0,0,0],
#   [0,1,0],
#   [0,0,0]
# ]
# 输出: 2
# 解释:
# 3x3 网格的正中间有一个障碍物。
# 从左上角到右下角一共有 2 条不同的路径：
# 1. 向右 -> 向右 -> 向下 -> 向下
# 2. 向下 -> 向下 -> 向右 -> 向右
# def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:


# 思路：这道题明显是62题的难度提高的版本, 在62题的基础上增加了'障碍'这个概念
# 不过其实影响并不大, 有'障碍'说明该点将无法通行, 所以只需要在计数时
# 不对'障碍'点进行计数即可
# 一样使用自底向上的动态规划方式, 由于这里使用0和1来表示障碍
# 所以会用位运算来转换


class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid):
        d = len(obstacleGrid)
        b = len(obstacleGrid[0])
        if obstacleGrid[0][0]:
            return 0
        for i in range(d):
            for j in range(b):
                obstacleGrid[i][j] = obstacleGrid[i][j] ^ 1
        for i in range(1, d):
            obstacleGrid[i][0] = obstacleGrid[i-1][0] & obstacleGrid[i][0] & 1
        for j in range(1, b):
            obstacleGrid[0][j] = obstacleGrid[0][j-1] & obstacleGrid[0][j] & 1
        for i in range(1, d):
            for j in range(1, b):
                if obstacleGrid[i][j]:
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1]
        return obstacleGrid[-1][-1]
