# 给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。
# 例如，给定三角形：
# [
#      [2],
#     [3,4],
#    [6,5,7],
#   [4,1,8,3]
# ]
# 自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。
# 说明：
# 如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。


# 思路：自底向上的使用动态规划, 每个格子储存从底部向上遇到的两种可行方案中路径和最小的一种的结果
# 然后上一层继续进行判断, 直至结束
# 原地进行计算和储存


class Solution:
    def minimumTotal(self, triangle):
        size = len(triangle)
        dp = triangle
        for i in range(size - 2, -1, -1):
            for j in range(i+1):
                dp[i][j] += min(dp[i+1][j], dp[i+1][j+1])
        return dp[0][0]
