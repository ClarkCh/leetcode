# 一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
# 骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
# 有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
# 为了尽快到达公主，骑士决定每次只向右或向下移动一步。
# 编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。
# 例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
# -2 (K)	-3	3
# -5	-10	1
# 10	30	-5 (P)
# 说明:
# 骑士的健康点数没有上限。
# 任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
# def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:


# 思路：该题明显最好就是用动态规划, 一般来说, 如果要求解的枚举所有合理可能的'具体情况', 应该使用回溯法
# 如果要求的是枚举所有合理可能的数量, 或所有合理可能中的最优可能的大概情况,
# 使用动态规划能大大减少操作量, 所以我将使用动态规划来解决这个问题
# 我把能够安全进入一个房间需要的血量记入dp表中, 比如只有一个房间, 这个房间是加血的, 那么其实我零血进入也是可以的(最后结束时+1)
# 如果我进入一个-3的房间, 那么我需要的血量是-(-3)(最后结束时+1), 所以我们只要从终点开始倒推到起点看谁需要的血量比较少就是答案
# 这道题要求的是勇士进入房间的最低安全血量, 分析一下, 如果勇士在第一个房间损失了10生命值, 但在下一个房间获得大量生命值回复
# 并一路都没有再掉血, 那么勇士进房间时需要多少血量才是安全的? 高于10血, 这说明了一点, 从终点开始倒数, 一个回血的房间, 如果
# 他能回血太多, 那其实并没有什么用, 因为他靠近终点的那些房间已经扣不完这些血量了, 所以, 这个回血的房间的增益一定没有我们
# 想象中的大, 那么我们来具体分析一下, 如果这个回血房间(当前房间的下一个房间, 或下或右)和当前房间的血量加起来, 小于零
# 那说明我到达当前房间还需要预留一些血, 否则就会死, 如果大于零的话, 是100血还是1000血都一样, 因为我的推理是从终点倒数的,
# 所以其实我都花不完这些血, 说明只要我能以高于零血的情况进入当前房间, 就成功了, 所以可以看出, 一个回血的房间如果回血后还是小于零
# 那么回血是完全有效的(并且我还要自己预留一点血量否则会死, 需要预留多少血量, 那就是记录值),
# 但如果大于零, 那估计就没什么区别了, 等等, 我们漏掉了一环, 如果当前房间是扣血的, 但是在下个房间补得很满
# (这是我们讨论回血房间记录值和当前房间加起来后血量总和超过零的一个分支), 那么我们进入这个房间时也是要带有一定血量才是安全的,
# 带有多少血量才是安全的?带有当前房间掉的血量
# 综上：如果dungeon点+下一个房间的记录值<0, 那么直接记下(dungeon点+记录值的和), 如果>0, 还要分析, 当前房间是不是<0, 如果<0,
# 当前房间的记录值应该为当前房间的值
# 当遇到有两种走向的房间, 就要比较那种走向需要的血量更少, (负更少), 所以取两种可能的较大值
# 击败85, 下方有把判断写成比较值的版本, 更简洁, 但是慢很多


class Solution:
    def calculateMinimumHP(self, dungeon):
        if dungeon == []:
            return 1
        self.d = len(dungeon)
        self.b = len(dungeon[0])
        dp = [[0] * self.b for i in range(self.d)]
        if dungeon[-1][-1] < 0:
            dp[-1][-1] = dungeon[-1][-1]
        else:
            dp[-1][-1] = 0
        for i in range(self.b - 2, -1, -1):
            total = dp[-1][i + 1] + dungeon[-1][i]
            if total > 0:
                if dungeon[-1][i] > 0:
                    dp[-1][i] = 0
                else:
                    dp[-1][i] = dungeon[-1][i]
            else:
                dp[-1][i] = total
        for i in range(self.d - 2, -1, -1):
            total = dp[i + 1][-1] + dungeon[i][-1]
            if total < 0:
                dp[i][-1] = total
            else:
                if dungeon[i][-1] > 0:
                    dp[i][-1] = 0
                else:
                    dp[i][-1] = dungeon[i][-1]
        for i in range(self.d - 2, -1, -1):
            for j in range(self.b - 2, -1, -1):
                total1 = dp[i + 1][j] + dungeon[i][j]
                if total1 > 0:
                    if dungeon[i][j] > 0:
                        total1 = 0
                    else:
                        total1 = dungeon[i][j]
                total2 = dp[i][j + 1] + dungeon[i][j]
                if total2 > 0:
                    if dungeon[i][j] > 0:
                        total2 = 0
                    else:
                        total2 = dungeon[i][j]
                dp[i][j] = max(total1, total2)
        return -dp[0][0] + 1


class Solution:
    def calculateMinimumHP(self, dungeon):
        if dungeon == []:
            return 1
        self.d = len(dungeon)
        self.b = len(dungeon[0])
        dp = [[0] * self.b for i in range(self.d)]
        if dungeon[-1][-1] < 0:
            dp[-1][-1] = dungeon[-1][-1]
        else:
            dp[-1][-1] = 0
        for i in range(self.b - 2, -1, -1):
            dp[-1][i] = min(dp[-1][i + 1] + dungeon[-1][i], dungeon[-1][i], 0)
        for i in range(self.d - 2, -1, -1):
            dp[i][-1] = min(dp[i + 1][-1] + dungeon[i][-1], dungeon[i][-1], 0)
        for i in range(self.d - 2, -1, -1):
            for j in range(self.b - 2, -1, -1):
                total1 = min(dp[i][j + 1] + dungeon[i][j], dungeon[i][j], 0)
                total2 = min(dp[i + 1][j] + dungeon[i][j], dungeon[i][j], 0)
                dp[i][j] = max(total1, total2)
        return -dp[0][0] + 1
