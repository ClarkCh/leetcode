# 给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。
# 说明：解集不能包含重复的子集。
# 示例:
# 输入: nums = [1,2,3]
# 输出:
# [
#   [3],
#   [1],
#   [2],
#   [1,2,3],
#   [1,3],
#   [2,3],
#   [1,2],
#   []
# ]
# def subsets(self, nums: List[int]) -> List[List[int]]:


# 思路：不重用，无重复元素，不包含重复子集, 即组合需要剪枝
# 使用基础回溯算法(可以用visit表或者直接收缩可选范围可达到剪枝效果)


class Solution:
    def subsets(self, nums):
        self.size = len(nums)
        self.res = [[]]
        self.backtrack(nums, 0, [])
        return self.res

    def backtrack(self, nums, index, lst):
        for i in range(index, self.size):
            lst.append(nums[i])
            self.res.append(lst[:])
            self.backtrack(nums, i+1, lst)
            lst.pop()
        return
