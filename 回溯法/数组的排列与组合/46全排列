# 给定一个没有重复数字的序列，返回其所有可能的全排列。
# 示例:
# 输入: [1,2,3]
# 输出:
# [
#   [1,2,3],
#   [1,3,2],
#   [2,1,3],
#   [2,3,1],
#   [3,1,2],
#   [3,2,1]
# ]
# def permute(self, nums: List[int]) -> List[List[int]]:


# 思路：典型的回溯法中, 全排列无需剪枝的情况, 由于元素不可复用, 附加一个检查表
# 由于元素的值之间没有关联性, 所以我采用字典作为检查表容器(不一定要用字典)


class Solution:
    def permute(self, nums):
        if nums == []:
            return []
        self.res = []
        self.visited = {}
        for i in nums:
            self.visited[i] = True
        self.dfs(nums, 0, [])
        return self.res

    def dfs(self, nums, index, lst):
        if index == len(nums):
            self.res.append(lst[:])
            return
        for i in self.visited:
            if self.visited[i]:
                lst.append(i)
                self.visited[i] = False
                self.dfs(nums, index+1, lst)
                lst.pop()
                self.visited[i] = True
        return
