# 给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。
# 说明：解集不能包含重复的子集。
# 示例:
# 输入: [1,2,2]
# 输出:
# [
#   [2],
#   [1],
#   [1,2,2],
#   [2,2],
#   [1,2],
#   []
# ]
# def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:


# 思路：详细分析看我的leetcode库首页中关于组合的剪枝分析
# 此处由于包含重复元素, 所以要先排序, 并增加一个循环内部判断变量,
# 由于不能包含重复子集, 所以是组合, 用基础的回溯算法visit表或收缩范围
# 使用收缩范围的方法等于自带递归终止条件对于收集子集的题目来说
# (因为不需要到达对应index才能收集答案)


class Solution:
    def subsetsWithDup(self, nums):
        self.res = [[]]
        self.size = len(nums)
        nums.sort()
        self.backtrack(nums, 0, [])
        return self.res

    def backtrack(self, nums, index, lst):
        total = 0
        for i in range(index, self.size):
            if total < nums[i]:
                total = nums[i]
                lst.append(nums[i])
                self.res.append(lst[:])
                self.backtrack(nums, i+1, lst)
                lst.pop()
        return
