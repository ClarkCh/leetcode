# 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。
# 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。
# 示例:
# 输入："23"
# 输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
# 说明:
# 尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。
# def letterCombinations(self, digits: str) -> List[str]:


# 思路：这个题目的要求是得到所有合理可能性的所有组合的具体情况, 所以用的方法是回溯法
# 并且这里的题意表示这里没有互斥关系, 所以这里的所有组合的可能性都是合理可能性, 不需要剪枝


class Solution:
    def letterCombinations(self, digits):
        if digits == '':
            return []
        self.res = []
        self.dct = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        self.dfs(digits, 0, [])
        return self.res

    def dfs(self, digits, index, lst):
        if index == len(digits):
            res = ''.join(lst)
            self.res.append(res)
            return
        for i in self.dct[digits[index]]:
            lst.append(i)
            self.dfs(digits, index+1, lst)
            lst.pop()
        return
