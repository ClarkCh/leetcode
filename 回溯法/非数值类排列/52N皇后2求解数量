# n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
# 上图为 8 皇后问题的一种解法。
# 给定一个整数 n，返回 n 皇后不同的解决方案的数量。
# 示例:
# 输入: 4
# 输出: 2
# 解释: 4 皇后问题存在如下两个不同的解法。
# [
#  [".Q..",  // 解法 1
#   "...Q",
#   "Q...",
#   "..Q."],
#
#  ["..Q.",  // 解法 2
#   "Q...",
#   "...Q",
#   ".Q.."]
# ]
# def totalNQueens(self, n: int) -> int:


# 思路：详细分析可以看51题N皇后, 这道题在完成了N皇后基本上只需要把收集
# 具体情况的操作换成计数, 就是这道题的解


class Solution:
    def totalNQueens(self, n: int) -> int:
        if n == 0:
            return []
        self.res = 0
        self.col = [True] * n
        self.dia1 = [True] * (2*n-1)
        self.dia2 = [True] * (2*n-1)
        self.dfs(n, 0, [])
        return self.res

    def dfs(self, n, index, lst):
        if index == n:
            self.res += 1
            return
        for i in range(n):
            if self.col[i] and self.dia1[index+i] and self.dia2[index-i+n-1]:
                self.col[i] = False
                self.dia1[index + i] = False
                self.dia2[index - i + n - 1] = False
                lst.append(i)
                self.dfs(n, index+1, lst)
                self.col[i] = True
                self.dia1[index + i] = True
                self.dia2[index - i + n - 1] = True
                lst.pop()
