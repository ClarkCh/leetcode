# 给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
#
# 例如：
# 给定二叉树 [3,9,20,null,null,15,7],
#
#     3
#    / \
#   9  20
#     /  \
#    15   7
# 返回锯齿形层次遍历如下：
#
# [
#   [3],
#   [20,9],
#   [15,7]
# ]
# def levelOrder(self, root: TreeNode) -> List[List[int]]:


# 思路：此处应该使用栈
# 参考102树的层序遍历的思路, 103需要在这个基础上改为使用栈结构
# 在每次获取节点时, 放入栈中, 并且每次获取节点的时候如果节点是属于新层的
# 那么改变节点的左右子节点的存入顺序
# 使用两个栈, 一个栈负责上一层, 一个栈负责下一层
# 当上层的栈为空时, 下层的节点必然已经全部存入下层栈, 
# 把下层栈变为上层栈, 生成新的下层栈, 循环进行
# 直至下层栈的内容为空, 则说明遍历完成
from queue import LifoQueue


class Solution:
    def levelOrder(self, root):
        if not root:
            return []
        q = LifoQueue()
        lst = []
        q.put((root, 0))
        while not q.empty():
            q2 = LifoQueue()
            while not q.empty():
                cur, level = q.get()
                if level > len(lst) - 1:
                    llst = []
                    lst.append(llst)
                llst.append(cur.val)
                if level % 2:
                    if cur.right:
                        q2.put((cur.right, level + 1))
                    if cur.left:
                        q2.put((cur.left, level + 1))
                else:
                    if cur.left:
                        q2.put((cur.left, level + 1))
                    if cur.right:
                        q2.put((cur.right, level + 1))
            q = q2
        return lst
