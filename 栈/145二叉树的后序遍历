# 给定一个二叉树，返回它的 后序 遍历。
# 示例:
# 输入: [1,null,2,3]
#    1
#     \
#      2
#     /
#    3
# 输出: [3,2,1]
# 进阶: 递归算法很简单，你可以通过迭代算法完成吗？
# def postorderTraversal(self, root: TreeNode) -> List[int]:


# 思路：二叉树的后序遍历的非递归写法是典型的使用栈的例子, 并且比前中序遍历的写法
# 更要复杂一丢丢
# 这里将会使用两个栈来完成后续遍历, 由于后序遍历的顺序是左右本身
# 所以将会按   本身->右->左      的节点顺序压入栈2
# 所以栈1的顺序应该是先压入根节点, 取出, 取出这个节点后要压入当前节点的左右节点
# 因为是后进先出的结构, 所以取出的时候会先取出当前节点的右节点再取出左节点
# 正符合前面对于栈2压入顺序的构思
# 另外附上自创的更为复杂和麻烦的后序遍历写法
from queue import LifoQueue


class Solution:
    def postorderTraversal(self, root):
        p = LifoQueue()
        q = LifoQueue()
        p.put(root)
        lst = []
        while not p.empty():
            # 由于压入栈1的顺序是先右后左, 所以他先把根节点压入栈2后会先深度遍历
            # 右子树, 再深度遍历左子树(如果画图的话可以看出这跟递归的感觉很相似)
            root = p.get()
            q.put(root)
            if root.left:
                p.put(root.left)
            if root.right:
                p.put(root.right)
        while not q.empty():
            root = q.get()
            lst.append(root.val)
        return lst


# 先根据二叉树的后序遍历的思路来分析:我们要偏深度优先型的遍历一棵树的左子树右子树
# 最后才到自身, 由于前面分析前中序遍历时分析过, 对于非广度优先的这种遍历方式限制了
# 我们不能在获取了一个树的左子树后立刻访问他的右子树, 这导致我们必然要在遍历了一个
# 树的左子树后先把该树存起来, 提供给后续访问右子树之用, 由于遍历完一个树的左子树后
# 要返回到这个树本身的节点, 这导致我们只能使用栈这种结构, 并且在后序遍历时我们会
# 遇到一个问题:我们在遍历完一个树的左子树后还不能遍历这个树本身, 而是要先遍历完这个
# 树的右子树, 却要在最后再遍历自身, 这说明这个树曾经拿出来, 但是又放回去了
# 所以重点就是把树放回去的时机和再次拿出来的时机的判断
# 如果不能做到在一个节点被第二次从栈中取出时判断出该树已经遍历完的话将会陷入死循环,
# 所以还要加入一个判断


class Solution:
    def postorderTraversal(self, root):
        if root == None:
            return
        q = LifoQueue()
        lst = []
        cur = root
        q.put(cur)
        while cur.left != None:# 由浅入深存如一个个树的自身, 直至树的最左端
            cur = cur.left
            q.put(cur)
        lst2 = [0]
        while True:
            cur = q.get()
            if cur.right != None:# 如果当前树存在右子树, 且没有被记录过, 只能先把当前树又压回栈了
                if cur != lst2[-1]:
                    q.put(cur)
                    lst2.append(cur)
                    cur = cur.right

                    q.put(cur)
                    while cur.left != None:
                        cur = cur.left
                        q.put(cur)
                else:
                    lst2.pop()
                    lst.append(cur.val)
                    if cur == root:
                        break
            else:
                lst.append(cur.val)
                if cur == root:
                    break
        return lst
