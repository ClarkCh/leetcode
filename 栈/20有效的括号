# 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。
# 有效字符串需满足：
# 左括号必须用相同类型的右括号闭合。
# 左括号必须以正确的顺序闭合。
# 注意空字符串可被认为是有效字符串。
# 示例 1:
# 输入: "()"
# 输出: true
# 示例 2:
# 输入: "()[]{}"
# 输出: true
# 示例 3:
# 输入: "(]"
# 输出: false
# 示例 4:
# 输入: "([)]"
# 输出: false
# 示例 5:
# 输入: "{[]}"
# 输出: true
# def isValid(self, s: str) -> bool:


# 思路：判断三种括号是否的正确性明显用到了栈的功能，因为括号的正确使用情况是里面的和里面作用，外面的和外面的一起作用
# [()]这一点恰恰用到了栈后进先出的特性
from queue import LifoQueue


class Solution:
    def isValid(self, s):
        dct = {')': '(', ']': '[', '}': '{'}
        q = LifoQueue()
        for i in s:
            if i not in dct:
                q.put(i)
            else:
                if q.empty() or q.get() != dct[i]:
                    return False
        if q.empty():
            return True
        return False
