# 根据逆波兰表示法，求表达式的值。
# 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
# 说明：
# 整数除法只保留整数部分。
# 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
# 示例 1：
# 输入: ["2", "1", "+", "3", "*"]
# 输出: 9
# 解释: ((2 + 1) * 3) =
# def evalRPN(self, tokens: List[str]) -> int:


# 思路：用的是先出现数字再出现符号的表达方式, 为了得到正常通用的中序表达式
# 我们采用后进先出结构, 当我们遇到符号时, 说明前一个数字应该出现在这个符号的后方
# 做成中序表达式让计算机求值
from queue import LifoQueue


class Solution:
    def evalRPN(self, tokens):
        lst = ['+', '-', '*', '/']
        q = LifoQueue()
        for i in tokens:
            if i not in lst:
                q.put(i)
            else:
                total = '' + q.get()
                total = total + i
                total = total + q.get()
                q.put(str(eval(total)))
        return int(q.get())
