# 设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。
# push(x) -- 将元素 x 推入栈中。
# pop() -- 删除栈顶的元素。
# top() -- 获取栈顶元素。
# getMin() -- 检索栈中的最小元素。
# 示例:
# MinStack minStack = new MinStack();
# minStack.push(-2);
# minStack.push(0);
# minStack.push(-3);
# minStack.getMin();   --> 返回 -3.
# minStack.pop();
# minStack.top();      --> 返回 0.
# minStack.getMin();   --> 返回 -2.


# 思路：基本要求是设计一个栈, 但是增加一个要求能够常数级显示栈中的最小元素,
# 所以必须要多用一个栈来压入当前情况的最小值, 如果新压入的值比原有最小值更小
# 那就把这个值也压入辅助栈中, 唯一需要注意的是如果辅助栈是空的, 别忘了强制加入当前压入值(不需判断)
class MinStack:

    def __init__(self):
        self.data = [] # 数据栈
        self.helper = [] # 辅助栈

    def push(self, val):
        self.data.append(val)
        if len(self.helper) == 0 or val <= self.helper[-1]:
            self.helper.append(val)

    def pop(self):
        top = self.data.pop()
        if self.helper and top == self.helper[-1]:
            self.helper.pop()
        return top
    
    def top(self):
        if self.data:
            return self.data[-1]

    def getMin(self):
        if self.helper:
            return self.helper[-1]
