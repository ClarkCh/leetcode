# 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
# 说明：
# 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
# 示例 1:
# 输入: [2,2,1]
# 输出: 1
# 示例 2:
# 输入: [4,1,2,1,2]
# 输出: 4
# def singleNumber(self, nums: List[int]) -> int:


# 思路: 这道题用最基本的思路就可以解决, 不过这道题其实可以使用位运算来解答,
# 这里将使用异或运算来解答是基于一下三点:
# 1) 一个数和0异或, 结果不变
# 2) 一个与自身异或, 结果为0
# 3) 两个不同的数异或, 结果将会是对两个数的二进制表示式的所有位进行异或
# 由于二进制中只存在正反, 所以多个数进行异或异或运算时, 重复元素会把这个元素第一次
# 的效果抵消掉, 所以可以通过异或运算找出唯一的只出现一次的元素
# 其实核心就是第三点


class Solution:
    def singleNumber(self, nums):
        res = 0
        for t in nums:
            res = res ^ t
        return res
