# 给定一个二叉树，检查它是否是镜像对称的。
# 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
#     1
#    / \
#   2   2
#  / \ / \
# 3  4 4  3
# 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:
#     1
#    / \
#   2   2
#    \   \
#    3    3
# 说明:
# 如果你可以运用递归和迭代两种方法解决这个问题，会很加分。
# def isSymmetric(self, root: TreeNode) -> bool:


# 思路：使用前序遍历和反向前序遍历, 获取两个列表, 如果两个列表是相同的
# 说明这是一个对称的二叉树, 需要注意一点, 中序遍历在不记录空节点的情况下
# 不同的结构的树也是可以获得相同的前序遍历列表的
# 所以我们需要在遍历的过程中记录空节点


class Solution:
    def isSymmetric(self, root):
        lst1 = self.inorder(root, [])
        lst2 = self.helper(root, [])
        return lst1 == lst2

    def inorder(self, node, lst):
        if not node:
            lst.append(None)
            return
        lst.append(node.val)
        self.inorder(node.left, lst)
        self.inorder(node.right, lst)
        return lst

    def helper(self, node, lst):
        if not node:
            lst.append(None)
            return
        lst.append(node.val)
        self.helper(node.right, lst)
        self.helper(node.left, lst)
        return lst
