# 给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）
# 例如：
# 给定二叉树 [3,9,20,null,null,15,7],
#     3
#    / \
#   9  20
#     /  \
#    15   7
# 返回其自底向上的层次遍历为：
# [
#   [15,7],
#   [9,20],
#   [3]
# ]
# def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:


# 思路：参考层序遍历, 把提交的层序遍历列表的顺序逆转
from queue import Queue


class Solution:
    def levelOrderBottom(self, root):
        if not root:
            return []
        q = Queue()
        q.put((root, 1))
        lst = []
        while not q.empty():
            cur, level = q.get()
            if cur.left:
                q.put((cur.left, level + 1))
            if cur.right:
                q.put((cur.right, level + 1))
            if len(lst) < level:
                lst.append([])
                llst = lst[level - 1]
            llst.append(cur.val)
        lst.reverse()
        return lst
