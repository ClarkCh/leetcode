# 给定一个二叉树，找出其最小深度。
# 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
# 说明: 叶子节点是指没有子节点的节点。
# 示例:
# 给定二叉树 [3,9,20,null,null,15,7],
#     3
#    / \
#   9  20
#     /  \
#    15   7
# 返回它的最小深度  2.
# def minDepth(self, root: TreeNode) -> int:


# 思路：空节点默认值为最大值(此处取巧设为10000, 
# 因为我认为题中不会出现深度最低为10000的树), 
# 叶节点高度为1, 然后每个节点比较取最小值然后+1


class Solution:
    def minDepth(self, root):
        if root == None:
            return 0
        return self.helper(root)

    def helper(self, node):
        if node == None:
            return 10000
        if node.left == None and node.right == None:
            return 1
        res1 = self.helper(node.left)
        res2 = self.helper(node.right)
        return min(res1, res2) + 1
