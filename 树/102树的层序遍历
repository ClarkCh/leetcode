# 给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
# 例如:
# 给定二叉树: [3,9,20,null,null,15,7],
#     3
#    / \
#   9  20
#     /  \
#    15   7
# 返回其层次遍历结果：
# [
#   [3],
#   [9,20],
#   [15,7]
# ]
# def levelOrder(self, root: TreeNode) -> List[List[int]]:


# 思路：使用队列, 逐层遍历节点存入队列, 取出使放入适当的列表中
# 注意这里使用了引用传递
from queue import Queue


class Solution:
    def levelOrder(self, root):
        if not root:
            return [[]]
        q = Queue()
        q.put((root, 1))
        lst = []
        while not q.empty():
            cur, level = q.get()
            if cur.left:
                q.put((cur.left, level + 1))
            if cur.right:
                q.put((cur.right, level + 1))
            if len(lst) < level:
                lst.append([])
                llst = lst[level - 1]
            llst.append(cur.val)
        return lst
