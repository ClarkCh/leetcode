# 给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。
# 说明：
# 你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。
# 示例 1:
# 输入: root = [3,1,4,null,2], k = 1
#    3
#   / \
#  1   4
#   \
#    2
# 输出: 1
# 示例 2:
# 输入: root = [5,3,6,2,4,null,null,1], k = 3
#        5
#       / \
#      3   6
#     / \
#    2   4
#   /
#  1
# 输出: 3
# def kthSmallest(self, root: TreeNode, k: int) -> int:


# 思路：中序遍历，第k次的答案就是了,在递归的中序遍历的写法中增加一个判断变量
# 由于中序遍历其实也是深度优先的一种, 所以这里有点回溯法的感觉


class Solution:
    def kthSmallest(self, root, k):
        self.num = 1
        self.res = 0
        self.dfs(root, k)
        return self.res

    def dfs(self, node, k):
        if self.num > k:
            return
        if node != None:
            self.dfs(node.left, k)
            if self.num == k:
                self.res = node.val
            self.num += 1
            self.dfs(node.right, k)
