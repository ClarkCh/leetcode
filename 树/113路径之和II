# 给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。
# 说明: 叶子节点是指没有子节点的节点。
# 示例:
# 给定如下二叉树，以及目标和 sum = 22，
#               5
#              / \
#             4   8
#            /   / \
#           11  13  4
#          /  \    / \
#         7    2  5   1
# 返回:
# [
#    [5,4,11,2],
#    [5,8,4,5]
# ]
# def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:


# 思路：这题应该是用深度遍历, 由于是树这种结构, 所以采用递归,
# 加上前面提到的叶节点判断方法, 这道题迎刃而解
# 关联题目112, 437(更复杂一丢丢)


class Solution:
    def pathSum(self, root, sum):
        if not root:
            return []
        self.res = []
        self.helper(root, sum, [])
        return self.res

    def helper(self, node, sum, lst):
        if not node:
            return
        lst.append(node.val)
        if not node.left and not node.right and sum == node.val:
            self.res.append(lst[:])
        self.helper(node.left, sum - node.val, lst[:])
        self.helper(node.right, sum - node.val, lst[:])
