# 二叉搜索树中的两个节点被错误地交换。
# 请在不改变其结构的情况下，恢复这棵树。
# 示例 1:
# 输入: [1,3,null,null,2]
#    1
#   /
#  3
#   \
#    2
# 输出: [3,1,null,null,2]
#    3
#   /
#  1
#   \
#    2
# def recoverTree(self, root: TreeNode) -> None:


# 思路：首先这个问题的相关内容我仔细检验过, 只需要更换两个节点的值, 而不改变结构
# 中序遍历二叉搜索树应该获得一个升序列表, 既然错误的更换了两个节点的值, 则获得的
# 则不是一个升序列表, 而且应该是只有两个位置错误的升序列表
# 所以我们只需要把节点记录下来, 并且找到他们对应的位置, 交换两个位置的值


class Solution:
    def recoverTree(self, root):
        if not root:
            return
        lst1, lst2 = self.helper(root, [], [])
        lst = sorted(lst1)
        lst8 = []
        for i in range(len(lst)):
            if lst[i] != lst1[i]:
                lst8.append(i)
        lst2[lst8[0]].val, lst2[lst8[1]].val = lst2[lst8[1]].val, lst2[lst8[0]].val
        return


    def helper(self, node, lst1, lst2):
        if not node:
            return
        self.helper(node.left, lst1, lst2)
        lst1.append(node.val)
        lst2.append(node)
        self.helper(node.right, lst1, lst2)
        return lst1, lst2
