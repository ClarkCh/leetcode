# 给定两个二叉树，编写一个函数来检验它们是否相同。
# 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
# 示例 1:
# 输入:       1         1
#           / \       / \
#          2   3     2   3
#
#         [1,2,3],   [1,2,3]
# 输出: true
# 示例 2:
# 输入:      1          1
#           /           \
#          2             2
#
#         [1,2],     [1,null,2]
# 输出: false
# 示例 3:
# 输入:       1         1
#           / \       / \
#          2   1     1   2
#
#         [1,2,1],   [1,1,2]
#
# 输出: false
# def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:


# 思路：使用任意一种遍历方式(不能是中序遍历), 记录对应的值, 如果两个列表完全相同, 则是相同的两棵树
# 但是需要注意一点, 必须把None也记录进去, 否则其实不同的树也是可以遍历出相同的列表的
# 如果不把None也记录进去, 可以使用两种遍历方式, 把两个树的对应遍历方式进行对比
# 如果都一致, 则说明两棵树是相同的


class Solution:
    def isSameTree(self, p, q):
        lst1 = self.helper(p, [])
        lst2 = self.helper(q, [])
        return lst1 == lst2

    def helper(self, node, lst):
        if not node:
            lst.append(None)
            return
        lst.append(node.val)
        self.helper(node.left, lst)
        self.helper(node.right, lst)
        return lst
