# 给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
# 说明: 叶子节点是指没有子节点的节点。
# 示例: 
# 给定如下二叉树，以及目标和 sum = 22，
#               5
#              / \
#             4   8
#            /   / \
#           11  13  4
#          /  \      \
#         7    2      1
# 返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。
# def hasPathSum(self, root: TreeNode, sum: int) -> bool:


# 思路：这里主要要用到一个比较少见的概念, 叶节点判断, 含义就是要判断这个节点
# 是否是一个叶节点, 比如例子中8-4-1中的4就不会叶节点, 因为他虽然左子树是空
# 但是他右子树不是空, 叶节点要求就是左右子树都为空, 所以只要判断从根到所有叶节点
# 的和中存在和为目标值的, 就返回True
# 关联题目113, 437


class Solution:
    def hasPathSum(self, root, sum):
        return self.helper(root, sum)

    def helper(self, node, sum):
        if not node:
            return
        if not node.left and not node.right and node.val == sum:
            return True
        return self.helper(node.left, sum-node.val) or self.helper(node.right, sum-node.val)
