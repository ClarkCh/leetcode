# 给定一个二叉树，判断其是否是一个有效的二叉搜索树。
# 假设一个二叉搜索树具有如下特征：
# 节点的左子树只包含小于当前节点的数。
# 节点的右子树只包含大于当前节点的数。
# 所有左子树和右子树自身必须也是二叉搜索树。
# 示例 1:
# 输入:
#     2
#    / \
#   1   3
# 输出: true
# 示例 2:
# 输入:
#     5
#    / \
#   1   4
#      / \
#     3   6
# 输出: false
# 解释: 输入为: [5,1,4,null,null,3,6]。
#      根节点的值为 5 ，但是其右子节点值为 4 。
# def isValidBST(self, root: TreeNode) -> bool:


# 思路：这个题目考查的是二叉搜索树性质, 由于二叉搜索树的中序遍历是一个升序列表
# 如果遍历发现不是升序列表, 则说明不是搜索树


class Solution:
    def isValidBST(self, root):
        if not root:
            return True
        res = self.inorder(root, [])
        rec = res[0] - 1
        for i in res:
            if rec >= i:
                return False
            rec = i
        return True

    def inorder(self, node, lst):
        if not node:
            return
        self.inorder(node.left, lst)
        lst.append(node.val)
        self.inorder(node.right, lst)
        return lst
