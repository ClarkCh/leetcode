# 给定一个二叉树，它的每个结点都存放着一个整数值。
# 找出路径和等于给定数值的路径总数。
# 路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。
# 二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。
# 示例：
# root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
#       10
#      /  \
#     5   -3
#    / \    \
#   3   2   11
#  / \   \
# 3  -2   1
# 返回 3。和等于 8 的路径有:
# 1.  5 -> 3
# 2.  5 -> 2 -> 1
# 3.  -3 -> 11
# def pathSum(self, root: TreeNode, sum: int) -> int:
# 思路：核心就是在原来的路径和函数基础上加上树的遍历，所以用双递归


class Solution:

    def __init__(self):
        self.val = 0

    def pathSum(self, root, sum):
        if not root:
            return 0
        self.findpath(root, sum)
        self.pathSum(root.left, sum)
        self.pathSum(root.right, sum)
        return self.val

    def findpath(self, node, sum):
        if not node:
            return 0
        if node.val == sum:
            self.val += 1
        self.findpath(node.left, sum - node.val)
        self.findpath(node.right, sum - node.val)
