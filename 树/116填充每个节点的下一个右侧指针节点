# 给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：
# struct Node {
#   int val;
#   Node *left;
#   Node *right;
#   Node *next;
# }
# 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。
# 初始状态下，所有 next 指针都被设置为 NULL。
# def connect(self, root: 'Node') -> 'Node':


# 思路：在层序遍历的基础上, 把每一层中获取的节点连接上下一个获取的节点
from queue import Queue


class Solution:
    def connect(self, root):
        if not root:
            return
        q = Queue()
        q.put((root, 0))
        # 初始化res的第二个参数为-1, 说明第一次取出的root为新层节点
        res = (0, -1)
        while not q.empty():
            cur, level = q.get()
            if cur.left:
                q.put((cur.left, level+1))
            if cur.right:
                q.put((cur.right, level+1))
            # 如果到了新层的第一个节点, 用res记录这个节点和所在层数
            if level > res[1]:
                res = (cur, level)
            # 其余的节点, 都是先把前一个节点(刚才把新层的第一个节点存入了)指向这个节点
            # 然后把当前节点存入res, 循环进行
            else:
                res[0].next = cur
                res = (cur, level)
        return root
