# 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
# 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
# 例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]
# 示例 1:
# 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
# 输出: 3
# 解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
# 示例 2:
# 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
# 输出: 5
# 解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
# def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':


# 思路：从235看到236, 由于变得无序, 感觉会变得没有规律
# 其实这里重点是把握住核心问题:把一棵二叉树看成三部分, 分别是中, 左子树, 右子树
# 如果中就是要找的其中一棵树, 那么另一棵树肯定在他的子树里, 那根节点自己就是公共祖先
# 否则分别对左右子树进行深度优先遍历, 如果遇到了要找的树的其中一棵, 返回对应节点,
# 如果一直找下去都找不到, 返回空, 从根节点开始往下找, 如果只找到一棵树, 说明另一棵树
# 藏在这棵树的子树里, 所以这棵树就是公共祖先
# 如果左右各有一棵树, 说明目前这棵树是要寻找的两棵树的公共祖先


class Solution:
    def lowestCommonAncestor(self, root, p, q):
        if root == None or root == p or root == q:
            return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left != None and right != None:
            return root
        if left != None:
            return left
        else:
            return right
