# 给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。
# 例如，从根到叶子节点路径 1->2->3 代表数字 123。
# 计算从根到叶子节点生成的所有数字之和。
# 说明: 叶子节点是指没有子节点的节点。
# 示例 1:
# 输入: [1,2,3]
#     1
#    / \
#   2   3
# 输出: 25
# 解释:
# 从根到叶子节点路径 1->2 代表数字 12.
# 从根到叶子节点路径 1->3 代表数字 13.
# 因此，数字总和 = 12 + 13 = 25.
# 示例 2:
# 输入: [4,9,0,5,1]
#     4
#    / \
#   9   0
#  / \
# 5   1
# 输出: 1026
# 解释:
# 从根到叶子节点路径 4->9->5 代表数字 495.
# 从根到叶子节点路径 4->9->1 代表数字 491.
# 从根到叶子节点路径 4->0 代表数字 40.
# 因此，数字总和 = 495 + 491 + 40 = 1026.
# def sumNumbers(self, root: TreeNode) -> int:


# 思路: 这里是一个很有意思的树的知识点, 关于根节点的判断, 当一个节点的左右节点都为空的时候node就是根节点


class Solution:
    def sumNumbers(self, root) -> int:
        return self.dfs(root, 0, [0])

    def dfs(self, node, total, lst):
        if node == None:
            return 0
        total = total * 10 + node.val
        if not node.left and not node.right:
            lst[0] += total
            return lst[0]
        else:
            self.dfs(node.left, total, lst)
            self.dfs(node.right, total, lst)
            return lst[0]
