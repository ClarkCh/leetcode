# 给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。
# 请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。
# 示例 1:
# 输入: 1->2->3->4->5->NULL
# 输出: 1->3->5->2->4->NULL
# 示例 2:
# 输入: 2->1->3->5->6->4->7->NULL
# 输出: 2->3->6->7->1->5->4->NULL
# 说明:
# 应当保持奇数节点和偶数节点的相对顺序。
# 链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。
# def oddEvenList(self, head: ListNode) -> ListNode:


# 思路：由于需要把链表先分成两份, 再把两个链表合一,所以需要注意先判断前面的节点是否为None,不为None才接上
#加上双指针
# 注意：思路是挺简单的, 但是需要考虑很多情况,建议写法围绕着移动的head和head.next来写
# 会比较好写


class Solution:
    def oddEvenList(self, head):
        cur1 = pre1 = ListNode(None)
        cur2 = pre2 = ListNode(None)
        while head != None and head.next != None:
            cur1.next = head
            cur2.next = head.next
            cur1 = cur1.next
            cur2 = cur2.next
            head = cur2.next
        if head != None:
            cur1.next = head
            cur1 = cur1.next
            cur2.next = None
        cur1.next = pre2.next
        return pre1.next
        
       
