# 给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
# 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…
# 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
# 示例 1:
# 给定链表 1->2->3->4, 重新排列为 1->4->2->3.
# 示例 2:
# 给定链表 1->2->3->4->5, 重新排列为 1->5->2->4->3.
# def reorderList(self, head: ListNode) -> None:


# 思路：这基本算是遇到过的链表类题目中最困难的一题了, 不可以只改变值(这是当然的)
# 还需要部分反向的插入链表, 尤其是最后要求不返回内容, 也就是说检验的是本来的链表
# 这说明这道题目要求原地修改
# 其实解法也不难,而且很好想出来, 只是之前的两种思路的组合而已
# 先跑到中间节点, 然后内部翻转后半段链表, 然后分别从两条链表开始, 间隔插入节点


class Solution:
    def reorderList(self, head):
        if head == None or head.next == None:
            return head
        # 寻找中间节点
        slow = fast = pre = ListNode(None)
        pre.next = head
        while fast != None:
            fast = fast.next
            if fast == None:
                break
            fast = fast.next
            slow = slow.next
        # 切断并内部翻转后段链表
        pre2 = ListNode(None)
        pre2.next = slow.next
        slow.next = None
        h1 = None
        h2 = pre2.next
        h3 = h2.next
        while h3 != None: # 这里用h3来判断是为了减少while内部的判断次数
            h2.next = h1
            h1 = h2
            h2 = h3
            h3 = h2.next
        # 由于上面用的是h3来判断, 所以内部是不需要判断的, 但这会导致并没有翻转完, 差一次
        h2.next = h1
        pre2.next = h2
        # 后段链表翻转完成了, 接下来进行间隔插入, 这个操作很简单
        pre = pre.next
        pre2 = pre2.next
        # 想要减少while内部判断, 就用节点数量少的链表作为判断依据
        while pre2.next != None:
            pre3 = pre.next # pre3是pre的next
            pre4 = pre2.next # pre4是pre2的next
            pre.next = pre2
            pre2.next = pre3
            pre = pre3
            pre2 = pre4
        pre3 = pre.next
        pre.next = pre2
        if pre3 != None:
            pre2.next = pre3
        return head
