# 反转一个单链表。
# 示例:
# 输入: 1->2->3->4->5->NULL
# 输出: 5->4->3->2->1->NULL
# 进阶:
# 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？


# 思路：翻转整个链表比起内部翻转链表更简单, 因为内部翻转链表是要在这个基础上添加一些判断的
# 既然题目要求用迭代和递归来解答, 那我就附上两种解答
# 先说迭代, 使用习惯使用的三指针h1(翻转后的next指向)h2(当前将要改变指向的节点)
# h3(由于h2改变指向后将没有办法找到h3节点, 所以事先记下h3)


# 迭代:98.48
class Solution:
    def reverseList(self, head):
        if head == None:
            return
        h1 = None
        h2 = head
        h3 = h2.next
        # while的判断可以用h1, h2, h3来判断, 但是由于三个指针有前后, 所以
        # 如果用靠后的h1来判断的话, 靠前的h3容易出现没有val的情况, 需要增加判断
        # 所以我采用最靠前的h3来判断, 以减少操作数
        while h3 != None:
            h2.next = h1
            h1 = h2
            h2 = h3
            h3 = h3.next
        # 由于使用h3来判断, 其实最后一个节点还没有连接好
        h2.next = h1
        return h2


# 递归 和迭代一模一样的思路 94.42
class Solution:
    def reverseList(self, head):
        if head == None:
            return
        return self.helper(None, head, head.next)


    def helper(self, h1, h2, h3):
        if h3 == None:
            h2.next = h1
            return h2
        h2.next = h1
        return self.helper(h2, h3, h3.next)
