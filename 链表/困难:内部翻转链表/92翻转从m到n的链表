# 反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。
# 说明:
# 1 ≤ m ≤ n ≤ 链表长度。
# 示例:
# 输入: 1->2->3->4->5->NULL, m = 2, n = 4
# 输出: 1->4->3->2->5->NULL
# def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:


# 思路：链表的内部翻转有固定套路，只要按照套路进行就可以了


class Solution:
    def reverseBetween(self, head, m, n):
        if head == None or m == n:
            return head
        rec = 1
        cur = pre = dummyhead = ListNode(None)
        dummyhead.next = head
        # pre表示要翻转的一段的前一个节点, cur表示要翻转的一段的最后一个节点
        while head != None and rec <= n:
            if rec == m - 1:
                pre = head
            elif rec == n:
                cur = head
            head = head.next
            rec += 1
        h2 = pre.next
        h1 = head
        h3 = h2.next
        # h1就是被翻转过后的内部节点, 当要翻转的一段的最后一个节点也翻转过了,内部翻转就完成了
        # 翻转前的首位节点直接接上当前head的节点(内部末尾与外部后半段连接已完成)
        while h1 != cur:
            h2.next = h1
            h1 = h2
            h2 = h3
            if h2 != None:
                h3 = h2.next
        # 内部翻转结束后, 把事先准备好的前一个节点接上新的内部首位节点
        pre.next = h1
        return dummyhead.next
