# 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
# k 是一个正整数，它的值小于或等于链表的长度。
# 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。
# 示例 :
# 给定这个链表：1->2->3->4->5
# 当 k = 2 时，应当返回: 2->1->4->3->5
# 当 k = 3 时，应当返回: 3->2->1->4->5
# 说明 :
# 你的算法只能使用常数的额外空间。
# 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
# def reverseKGroup(self, head: ListNode, k: int) -> ListNode:


# 思路：这道题基本上是我见过的链表中最困难的题目之一,他的核心问题是内部翻转链表(更重要一点是内部链表有多个节点)
# 不过思路基本跟普通的内部翻转链表是一样的,不过对于要翻转多个节点这种情况来说,我们要按顺序的
# 一个一个地进行翻转,我将采用循环的方式来写, 击败96%, 感动


class Solution:
    def reverseKGroup(self, head, k):
        if head == None:
            return None
        if k == 1:
            return head
        pre = dummyhead = ListNode(None)
        pre.next = head
        num = 1
        # 从24题可以看出，这里有两种写法,1是当num重新为1时进行翻转,2是当num==k时进行翻转
        # 这里选用第二种,解答过程的核心在于前面提到的记录的变量,
        # 我设pre为上一段已经翻转过之后最后的节点,head将到底下一段最开始的节点,
        # pre2标记为这段节点的首节点(因为他将充当这段节点翻转之后的最后一个节点, 也就是下一个pre)
        # 我们将从这一段的第一个节点开始进行翻转, 命名为h2,h1为这个节点翻转过后的next的节点
        # 所以最开始的h1是下一段的首节点, h3为翻转之前当前(h2)节点的下一个节点, 这是备份用的
        # 因为如果不事先备份的话等h2的next指向改变之后就找不到原来的next指向的那个节点了
        while head != None:
            if num == k:
                h1 = head = head.next
                h2 = pre2 = pre.next
                h3 = h2.next
                h2.next = h1
                while h3 != head:
                    h1 = h2
                    h2 = h3
                    h3 = h2.next
                    h2.next = h1
                pre.next = h2
                pre = pre2
                num = 1
            else:
                num += 1
                head = head.next
        return dummyhead.next
