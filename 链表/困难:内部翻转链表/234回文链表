# 请判断一个链表是否为回文链表。
# 示例 1:
# 输入: 1->2
# 输出: false
# 示例 2:
# 输入: 1->2->2->1
# 输出: true
# 进阶：
# 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？
# def isPalindrome(self, head: ListNode) -> bool:


# 思路：如果采用列表来解答的话是很简单的,但是不能作弊的话就要从列表和链表的区别来分析这道题
# 他们的区别主要在于链表不能进行随机方法, 这正是我们想用列表的原因
# 但是由于他要判断的是是否左右对称, 所以我们可以不需要进行暴力破解遍历n次链表,
# 只需要先到底链表的中间节点, 然后翻转左右链表中的一条, 就可以进行同步对比了, 难度不高, 但是麻烦
# 核心技巧就是找到链表的中间节点和翻转链表, 我习惯使用迭代来解


class Solution:
    def isPalindrome(self, head):
        if head == None:
            return None
        slow = fast = ListNode(None)
        slow.next = head
        # 寻找中间节点, 以下的写法会找到中间或中间偏左的节点
        while fast != None:
            fast = fast.next
            if fast == None:
                break
            fast = fast.next
            slow = slow.next
        h2 = slow.next
        # 对于h2是否为空的判断很重要
        if h2 == None:
            return True
        slow.next = None
        # 翻转链表的首要操作, 设定h1, 由于要分成两个链表, h1先为空
        h1 = None
        h3 = h2.next
        # 经典的选择最快的节点来进行判断, 可以减少while内部判断次数
        while h3 != None:
            h2.next = h1
            h1 = h2
            h2 = h3
            h3 = h2.next
        # 由于选择最快的节点作为判断, 最后一个非空节点还没有接好next, 补充接好
        h2.next = h1
        # 此时h2为翻转部分(右侧)翻转后的头节点
        while h2 != None:
            if h2.val != head.val:
                return False
            h2 = h2.next
            head = head.next
        return True
