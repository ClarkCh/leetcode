# 给定两个非空链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。
# 你可以假设除了数字 0 之外，这两个数字都不会以零开头。
# 进阶:
# 如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。
# 示例:
# 输入: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
# 输出: 7 -> 8 -> 0 -> 7
# def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:


# 思路：这道题的概念和2题的两数相加几乎是一模一样的, 但是由于他的链表表示方式
# 和我们的数字表示方式方向一直, 但是数学上运算都是从低位开始的,无法从高位开始
# 建议先把列表整个翻转, 然后用2题的两数相加方案来解答
# 但是由于进阶要求我们不能修改链表, 所以这种方法就不能使用
# 那么可以使用栈来记录, 以解决错位问题, 并且写起来会更加简单
from queue import LifoQueue


class Solution:
    def addTwoNumbers(self, l1, l2):
        p = LifoQueue()
        q = LifoQueue()
        self.l = LifoQueue()
        while l1 != None:
            p.put(l1.val)
            l1 = l1.next
        while l2 != None:
            q.put(l2.val)
            l2 = l2.next
        rec = 0
        while not p.empty() and not q.empty():
            rec = self.helper(p.get(), q.get(), rec)
        while not p.empty():
            rec = self.helper(p.get(), 0, rec)
        while not q.empty():
            rec = self.helper(0, q.get(), rec)
        cur = pre = ListNode(None)
        if rec != 0:
            cur.next = ListNode(1)
            cur = cur.next
        while not self.l.empty():
            cur.next = ListNode(self.l.get())
            cur = cur.next
        return pre.next

    def helper(self, n1, n2, rec):
        res = n1 + n2 + rec
        if res > 9:
            self.l.put(res%10)
            return 1
        self.l.put(res)
        return 0
