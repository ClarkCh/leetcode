# 给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。
# 示例：
# 给定一个链表: 1->2->3->4->5, 和 n = 2.
# 当删除了倒数第二个节点后，链表变为 1->2->3->5.
# 说明：
# 给定的 n 保证是有效的。
# 进阶：
# 你能尝试使用一趟扫描实现吗？
# def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:


# 思路：采用快慢指针，让快指针比满指针先走N+1步,慢指针直接跳过下一个节点就可以
# 难度不高，但是使用了一个链表修改技巧：快慢指针, 建议使用虚拟头节点


class Solution:
    def removeNthFromEnd(self, head, n):
        if head == None:
            return
        dummyhead = ListNode(None)
        dummyhead.next = head
        slow = fast = dummyhead
        for i in range(n+1):
            fast = fast.next
        while fast != None:
            fast = fast.next
            slow = slow.next
        slow.next = slow.next.next
        return dummyhead.next
