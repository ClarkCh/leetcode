# 给定一个链表，判断链表中是否有环。
# 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。
# 示例 1：
# 输入：head = [3,2,0,-4], pos = 1
# 输出：true
# 解释：链表中有一个环，其尾部连接到第二个节点。
# 示例 2：
# 输入：head = [1,2], pos = 0
# 输出：true
# 解释：链表中有一个环，其尾部连接到第一个节点。
# 示例 3：
# 输入：head = [1], pos = -1
# 输出：false
# 解释：链表中没有环。
# def hasCycle(self, head):
# head: ListNode
# return: bool


# 思路：快慢指针, 如果快指针能遇上慢指针的话,说明有环
# 还有改变值的方法(取巧)把经过的节点的值改为特殊值,那么下次遇到就知道曾经遇到过了


class Solution(object):
    def hasCycle(self, head):
        if head == None:
            return False
        if head.next == head:
            return True
        slow = fast = ListNode(None)
        pre.next = head
        while fast != None:
            fast = fast.next
            if fast == slow:
                return True
            if fast == None:
                return True
            fast = fast.next
            slow = slow.next
        return False

class Solution(object):
    def hasCycle(self, head):
        if head == None:
            return False
        while head != None:
            if head.val == None:
                return True
            head.val = None
            head = head.next
        return False
