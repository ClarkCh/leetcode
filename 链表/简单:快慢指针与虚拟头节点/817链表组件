# 给定一个链表（链表结点包含一个整型值）的头结点 head。
# 同时给定列表 G，该列表是上述链表中整型值的一个子集。
# 返回列表 G 中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表 G 中）构成的集合。
# 示例 1：
# 输入:
# head: 0->1->2->3
# G = [0, 1, 3]
# 输出: 2
# 解释:
# 链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。
# 示例 2：
# 输入:
# head: 0->1->2->3->4
# G = [0, 3, 1, 4]
# 输出: 2
# 解释:
# 链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。
# 注意:
# 如果 N 是给定链表 head 的长度，1 <= N <= 10000。
# 链表中每个结点的值所在范围为 [0, N - 1]。
# 1 <= G.length <= 10000
# G 是链表中所有结点的值的一个子集.
# def numComponents(self, head: ListNode, G: List[int]) -> int:


# 思路：首先审题, 其实题意很简单, 用没有出现在列表中的整型值来把链表分成多段, 
# 返回链表被分成的数量, 主要用到了双指针


class Solution:
    def numComponents(self, head, G):
        if head == None:
            return 0
        # 由于判断一个整型是否在列表中如果用循环的话会很麻烦, 
        # 所以做了一个哈希表, 或者用字典也可以
        visited = [False] * 10001
        for i in G:
            visited[i] = True
        pre = ListNode(-1)
        # 双指针, 一前一后
        pre.next = head
        res = 0
        while head != None:
            # 如果当前指针的整型是列表中没有的, 
            # 前一个指针的整型是列表中有的, 那说明这又多了一个组件
            if not visited[head.val] and visited[pre.val]:
                res += 1
            head = head.next
            pre = pre.next
        if visited[pre.val]:
            res += 1
        return res
