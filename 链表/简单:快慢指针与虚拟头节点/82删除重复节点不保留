# 给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。
# 示例 1:
# 输入: 1->2->3->3->4->4->5
# 输出: 1->2->5
# 示例 2:
# 输入: 1->1->1->2->3
# 输出: 2->3
# def deleteDuplicates(self, head: ListNode) -> ListNode:


# 思路：用快慢指针+一个记录值, 难度不高, 用循环解(需要双while, 而且这里需要的指针比较麻烦)
# 更简单的思路是改写节点, 用递归解
# 击败99.8  很开心


class Solution:
    def deleteDuplicates(self, head):
        if head == None:
            return
        pre = dummyhead = ListNode(None)
        pre.next = self.helper(head)
        return pre.next


    # 辅助函数的作用是判断自己
    # 传入一个节点, 如果节点发现自己有问题一直跳转到跟自己值不同的节点去,然后返回那个节点
    # 当然返回之前也要那个节点自己判断自己是否有问题
    # 如果节点自己没问题, 那就让节点的next节点自己判断有没有问题，把next节点指向判断过后的next节点
    def helper(self, node):
        if node == None or node.next == None:
            return node
        if node.next.val == node.val:
            total = node.val
            while node != None and node.val == total:
                node = node.next
            if node != None:
                node = self.helper(node)
            return node
        node.next = self.helper(node.next)
        return node

