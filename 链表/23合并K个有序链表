# 合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。
# 示例:
# 输入:
# [
#   1->4->5,
#   1->3->4,
#   2->6
# ]
# 输出: 1->1->2->3->4->4->5->6
# def mergeKLists(self, lists: List[ListNode]) -> ListNode:


# 思路：直接的思路可以使用暴力破解，但是考虑到每次都对比K个数值实在麻烦
# 可以考虑使用最小堆，每次推出的内容中包含所在链表信息，然后推入对应链表的下一个数值(指针向后一格)
# 但是我比较喜欢使用类似计数排序的思路, 这里将使用计数排序进行解答
# 后来发现要提交的是一个链表，感觉新建节点可能消耗过大,附上使用最小堆的解法


class Solution:
    def mergeKLists(self, lists):
        maxval = 0
        minval = 0
        dict0 = {}
        cur = pre = ListNode(None)
        for i in lists:
            while i != None:
                if i.val > maxval:
                    maxval = i.val
                if i.val < minval:
                    minval = i.val
                if i.val not in dict0:
                    dict0[i.val] = 1
                else:
                    dict0[i.val] += 1
                i = i.next
        for i in range(minval, maxval+1):
            if i not in dict0:
                pass
            elif dict0[i] == 1:
                cur.next = ListNode(i)
                cur = cur.next
            else:
                for j in range(dict0[i]):
                    cur.next = ListNode(i)
                    cur = cur.next
        return pre.next


import heapq


class Solution:
    def mergeKLists(self, lists):
        if lists == []:
            return None
        pre = dummyhead = ListNode(None)
        size = len(lists)
        # visited = [0] * size
        q = []
        size = len(lists)
        for i in range(size):
            if lists[i] != None:
                heapq.heappush((lists[i].val, i))
        while len(q) > 0:
            i, j = heapq.heappop(q)
            pre.next = lists[j]
            pre = pre.next
            lists[j] = lists[j].next
            if lists[j] != None:
                heapq.heappush((lists[j].val, j))
        return dummyhead.next
