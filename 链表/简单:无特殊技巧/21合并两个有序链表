# 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 
# 示例：
# 输入：1->2->4, 1->3->4
# 输出：1->1->2->3->4->4
# def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:


# 思路：直接使用指针向前移动并判断大小即可
# 一般来说如果涉及到链表的寻找中值并翻转等类似的操作时可能会使用递归，否则个人倾向于使用循环
# 注意：leetcode上有跟这道题很类似的合并多个有序链表，思路基本一样，解起来稍微难一些


class Solution:
    def mergeTwoLists(self, l1, l2):
        cur = pre = ListNode(None)
        while l1 != None and l2 != None:
            if l1.val <= l2.val:
                res = l1.val
                l1 = l1.next
            else:
                res = l2.val
                l2 = l2.next
            cur.next = ListNode(res)
            cur = cur.next
        if l1 != None:
            cur.next = l1
        if l2 != None:
            cur.next = l2
        return pre.next
