# 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。
# 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
# 示例:
# 给定 1->2->3->4, 你应该返回 2->1->4->3.
# def swapPairs(self, head: ListNode) -> ListNode:


# 思路:链表的内部翻转基本上是链表最难的操作了,解答的核心是注意对于要翻转的一段节点
# 的前一个节点，后一个节点，以及这段要翻转的节点的内部的头尾都要做上标记，否则没法连上,用循环
# 第一种解法是到了下一段开始才对上一段进行整理，第二种解法是到了当前段的最后，就进行整理
# 思路基本一致，只是写法略有不同，个人感觉第二种解法写起来更加好写一些

class Solution:
    def swapPairs(self, head):
        pre = dummyhead = ListNode(None)
        pre.next = head
        k = 0
        # 过程中主要有3个指针：pre(上一个翻转后最后的位置)cur(这一次翻转前最后的位置)head(下一轮开始的位置)
        while head != None:
            if k == 2:
                cur = head
                k = 1
            elif k == 1:
                cur.next = pre.next
                pre.next = cur
                pre = cur.next
                pre.next = head
                k = 2
            else:
                k = 2
            head = head.next
        if k == 1:
            cur.next = pre.next
            pre.next = cur
            pre = cur.next
            pre.next = head
        return dummyhead.next


class Solution:
    def swapPairs(self, head):
        pre = dummyhead = ListNode(None)
        dummyhead.next = head
        cur = head
        num = 1
        # num作为奇偶标记,cur是当前节点,font是新一段的首节点,pre是上一段的末节点
        while cur != None:
            if num == 2:
                font = cur.next
                cur.next = pre.next
                pre.next = cur
                cur.next.next = font
                pre = cur.next
                cur = font
                num = 1
            else:
                cur = cur.next
                num = 2
        return dummyhead.next
