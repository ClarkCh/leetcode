# 给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个
# 元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件
# 且不重复的四元组。
# 注意：
# 答案中不可以包含重复的四元组。
# 示例：
# 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。
# 满足要求的四元组集合为：
# [
#   [-1,  0, 0, 1],
#   [-2, -1, 1, 2],
#   [-2,  0, 0, 2]
# ]
# def fourSum(self, nums: List[int], target: int) -> List[List[int]]:


# 思路：针对这种在同一个数组上进行多次循环的问题, 大概率可以使用指针碰撞
# 降低复杂度, 要计算四数之和, 这里将先把数组排序
# 然后用两个指针各自进行列表遍历
# 然后左右指针在另外两个指针的对应情况下求组合的和进行指针碰撞
# 照样先使用集合和元组来储存


class Solution:
    def fourSum(self, nums, target):
        size = len(nums)
        nums.sort()
        ans = set()
        midl = 0
        while midl < size - 3:
            midr = midl + 1
            while midr < size - 2:
                l = midr + 1
                r = size - 1
                while l < r:
                    temp = nums[midl] + nums[midr] + nums[l] + nums[r]
                    if temp == target:
                        ans.add((nums[midl], nums[midr], nums[l], nums[r]))
                        l += 1
                        r -= 1
                    elif temp < target:
                        l += 1
                    else:
                        r -= 1
                midr += 1
            midl += 1
        res = []
        for i in ans:
            res.append(list(i))
        return res
