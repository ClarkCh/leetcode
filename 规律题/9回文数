# 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
# 示例 1:
# 输入: 121
# 输出: true
# 示例 2:
# 输入: -121
# 输出: false
# 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
# 示例 3:
# 输入: 10
# 输出: false
# 解释: 从右向左读, 为 01 。因此它不是一个回文数。
# 进阶:
# 你能不将整数转为字符串来解决这个问题吗？
# def isPalindrome(self, x: int) -> bool:


# 思路：如果给定的是一个字符串的话那直接求半数, 然后分别从左右两侧往中间
# 遍历, 检查是否完全一致即可, 但是题目希望我们不要转换成字符串
# 我们可以通过取商和取余来达到两侧往中间移动的目的
# 也可以通过整数反转后对比原来的数判断是否相等来证明回文数


class Solution:
    def isPalindrome(self, x):
        if x < 0:
            return False
        if x < 10:
            return True
        res = 0
        z = x
        while x >= 10:
            y = x % 10
            x = x // 10
            res = y + res * 10
        res = x + res * 10
        return res == z
