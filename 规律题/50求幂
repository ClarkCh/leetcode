# 实现 pow(x, n) ，即计算 x 的 n 次幂函数。
# 示例 1:
# 输入: 2.00000, 10
# 输出: 1024.00000
# 示例 2:
# 输入: 2.10000, 3
# 输出: 9.26100
# 示例 3:
# 输入: 2.00000, -2
# 输出: 0.25000
# 解释: 2-2 = 1/22 = 1/4 = 0.25
# 说明:
# -100.0 < x < 100.0
# n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。


# 思路：这里的暴力破解法就是模拟算术过程, 不过有更好的解决方案, 因为在幂计算的过程中
# A3*A3 = A (3+3)  这样基于二分搜索可以减少计算过程, 可以加速计算过程
# 并且使用二进制和动态规划的查找表思路来优化这个二分搜索思路, 击败95
# 其实这里使用自顶而下的递归写法也是可以的，并且不需要记忆化搜索, 因为这里
# 要计算的是上一个递归返回值的平方, 不像f(n) = f(n-1) + f(n-2)这种存在多层级
# 的计算, 如果存在多层级的计算必须使用记忆化搜索,
# 但是由于需要的恰好是上一级返回值, 所以不需要记忆化搜索, 附上递归的写法


class Solution:
    def myPow(self, x, n):
        if n == 0:
            return 1
        if n == 1:
            return x
        if n == -1:
            return 1 / x
        sign = self.myPow(x, n%2)
        if n < 0:
            sign = 1/sign
        half = self.myPow(x, int(n / 2))
        return sign * half * half
        

class Solution2:
    def myPow(self, x, n):
        if x == 0:
            return 0
        if n == 0:
            return 1
        k = abs(n)
        str1 = str(bin(k))[2:]
        dct = {'1': 1, '0': 0}
        lst = []
        size = len(str1)
        for i in range(1, size+1):
            lst.append(dct[str1[-i]])
        # 制作查找表
        dp = [1] * size
        dp[0] = abs(x)
        for i in range(1, size):
            dp[i] = dp[i-1] * dp[i-1]
        res = 1
        for i in range(size):
            if lst[i] == 1:
                res = res * dp[i]
        if x < 0 and lst[0] == 1:
            res = - res
        if n < 0:
            res = 1 / res
        return res
