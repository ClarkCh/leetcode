# 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
# 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
# 你可以假设除了整数 0 之外，这个整数不会以零开头。
# 示例 1:
# 输入: [1,2,3]
# 输出: [1,2,4]
# 解释: 输入数组表示数字 123。
# 示例 2:
# 输入: [4,3,2,1]
# 输出: [4,3,2,2]
# 解释: 输入数组表示数字 4321。
# def plusOne(self, digits: List[int]) -> List[int]:


# 思路：把列表中的一个一个的整型组合成一个整型,然后+1
# 主要在于组合成一个整型的思路, 从高位开始, 每次将高位*10即可
# 并且要返回一个相似的列表
# 我使用另一种思路, 从个位数开始, 不再需要进一的时候即可直接提交
# 如果恰好99 +1 这种, 我在最后放置的一个判断是否需要进一
# 由于不需要进一的数在循环过程中直接结束了, 所以循环过程结束还在运行的
# 说明该数必须进一


class Solution:
    def plusOne(self, digits):
        rec = 1
        for i in range(1, len(digits)+1):
            temp = rec + digits[-i]
            if temp > 9:
                digits[-i] = temp - 10
                rec = 1
            else:
                digits[-i] = temp
                return digits
        digits.insert(0, 1)
        return digits
