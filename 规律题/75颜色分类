# 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
# 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
# 注意:
# 不能使用代码库中的排序函数来解决这道题。
# 示例:
# 输入: [2,0,2,1,1,0]
# 输出: [0,0,1,1,2,2]
# 进阶：
# 一个直观的解决方案是使用计数排序的两趟扫描算法。
# 首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
# 你能想出一个仅使用常数空间的一趟扫描算法吗？
# def sortColors(self, nums: List[int]) -> None:


# 思路：这题是典型的使用单次快排思路的题目, 使用三指针
# l(left), mid, r(right)指针来操作
# 首先l处于最左端, mid和l重合, r处于最右段, 左闭右闭
# 如果mid所在值 < 0,mid右移, l右移, 如果 == 1, mid右移
# 如果 > 1, mid和r交换值, r左移, 终止条件是mid > r
# 注意指针l和r所在位置其实都不属于左右两侧的


class Solution:
    def sortColors(self, nums):
        l = mid = 0
        r = len(nums) - 1
        while mid <= r:
            if nums[mid] > 1:
                nums[mid], nums[r] = nums[r], nums[mid]
                r -= 1
            elif nums[mid] < 1:
                nums[mid], nums[l] = nums[l], nums[mid]
                mid += 1
                l += 1
            else:
                mid += 1
        return
