# 罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
# 字符          数值
# I             1
# V             5
# X             10
# L             50
# C             100
# D             500
# M             1000
# 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
# 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，
# 所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
# I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
# X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
# C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
# 给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。
# 示例 1:
# 输入: 3
# 输出: "III"
# 示例 2:
# 输入: 4
# 输出: "IV"
# 示例 3:
# 输入: 9
# 输出: "IX"
# 示例 4:
# 输入: 58
# 输出: "LVIII"
# 解释: L = 50, V = 5, III = 3.
# 示例 5:
# 输入: 1994
# 输出: "MCMXCIV"
# 解释: M = 1000, CM = 900, XC = 90, IV = 4.
# def intToRoman(self, num: int) -> str:


# 思路：这里最重要的是给一种优先的概念, 要知道存在的罗马数字值中, 更大的具有更优先的表达顺序
# 比如遇到10我们理论上可以表达为X和VV, 但是正确的选择是X, 是因为10是存在罗马数字的值中的
# 并且更大,然后就是构造对应关系, 把数字和罗马数字进行转换
# 这里可以使用字典, 但是考虑到字典是无序的, 比较难构造优先关系, 所以我将数字和罗马数字
# 对应的且逆序地放在两个数组中, 这样就从左往右遍历就可以达到优先和对应转换的效果


class Solution:
    def intToRoman(self, num):
        nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        lst = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
        res = ''
        index = 0
        while num > 0:
            while index < 14 and num < nums[index]:
                index += 1
            res += lst[index]
            num -= nums[index]
        return res
