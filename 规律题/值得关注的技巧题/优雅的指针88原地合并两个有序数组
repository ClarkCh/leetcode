# 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。
# 说明:
# 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
# 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
# 示例:
# 输入:
# nums1 = [1,2,3,0,0,0], m = 3
# nums2 = [2,5,6],       n = 3
# 输出: [1,2,2,3,5,6]
# def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:


# 思路:对两个有序数组进行合并其实并不难, 但是这里要求进行原地排序
# 当然即使要求原地排序也不难, 但是考虑想用比较优的方法来解答,
# 这里将使用三指针来进行排序, 两个指针分别指向两个数组要比较的位置(从右往左)
# 第三个指针指向将要被填充的位置(最开始就是m+n-1索引的位置)
# 偏大的值将会填充到第三个指针的位置, 然后第三个指针向前移动直至到索引0


class Solution:
    def merge(self, nums1, m, nums2, n):
        move = m + n - 1
        m -= 1
        n -= 1
        while m > -1 and n > -1:
            if nums1[m] >= nums2[n]:
                nums1[move] = nums1[m]
                m -= 1
            else:
                nums1[move] = nums2[n]
                n -= 1
            move -= 1
        if n != -1:
            for i in range(move, -1, -1):
                nums1[i] = nums2[n]
                n -= 1
        return
