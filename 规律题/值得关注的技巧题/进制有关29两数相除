# 给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。
# 返回被除数 dividend 除以除数 divisor 得到的商。
# 示例 1:
# 输入: dividend = 10, divisor = 3
# 输出: 3
# 示例 2:
# 输入: dividend = 7, divisor = -3
# 输出: -2
# 说明:
# 被除数和除数均为 32 位有符号整数。
# 除数不为 0。
# 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。
# def divide(self, dividend: int, divisor: int) -> int:


# 思路：这个题目跟进制很有关系, 试想, 对于一个二进制表达而言
# 一个数除以2的结果, 其实就是舍弃二进制最后一位后得到的数,
# 所以我制作一个除数进制的表(反向的)因为反向的列表不需要一直修改列表的索引值
# 比如制作一个三进制表[3, 9, 27, 81, 243], 是反向的表, 目标值为180
# 根据三进制表算出180的三进制数值为      2020
# 由于除以3等于把最后一位舍去, 所以得到的答案是202(三进制)再转换回十进制
# [3, 9, 27, 81, 243]
#  2  0  2(这是正向的第一个2)       == 3 + 3 + 27 + 27 = 60
# 同样的思路, 做成二进制表也是可以的(并且由于案例中可能存在被除数十分大的
# 情况, 这样制作一个以被除数决定进制的函数用起来是没有意义的, 所以制作二进制表)


# 二进制表
class Solution:
    def divide(self, dividend, divisor):
        if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0):
            sign = 1
        else:
            sign = -1
        dividend = abs(dividend)
        divisor = abs(divisor)
        if dividend < divisor:
            return 0
        lst = []
        for i in range(dividend):
            if divisor > dividend:
                break
            lst.append(divisor)
            divisor = divisor + divisor
        size = len(lst)
        dp = [1] * size
        for i in range(1, size):
            dp[i] = dp[i-1] + dp[i-1]
        res = 0
        for i in range(size-1, -1, -1):
            total = dividend - lst[i]
            if total > 0:
                res += dp[i]
                dividend = total
        if dividend == lst[0]:
            res += 1
        if sign < 0:
            return -min(res, 2147483648)
        return min(res, 2147483647)


# # 被除数进制表
class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        sign = -1
        if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0):
            sign = 1
        dividend = abs(dividend)
        divisor = abs(divisor)
        if divisor == 1:
            res = dividend
        elif divisor > dividend:
            res = 0
        elif divisor == dividend:
            res = 1
        else:
            dp = [divisor]
            n = divisor
            for i in range(dividend + 2):
                rec = 0
                for j in range(divisor):
                    rec += n
                n = rec
                dp.append(n)
                if n > dividend:
                    break
            print(dp)
            res = 0
            for i in range(1, len(dp)):
                while dividend >= dp[-i]:
                    res += dp[-i - 1]
                    dividend -= dp[-i]
            while dividend >= dp[0]:
                res += 1
                dividend -= dp[0]
        if sign < 0:
            return -min(res, 2147483648)
        return min(res, 2147483647)
