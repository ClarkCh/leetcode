# 给定一个数组 nums 和一个值 val，、你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
# 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
# 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
# 示例 1:
# 给定 nums = [3,2,2,3], val = 3,
# 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
# 你不需要考虑数组中超出新长度后面的元素。
# 示例 2:
# 给定 nums = [0,1,2,2,3,0,4,2], val = 2,
# 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
# 注意这五个元素可为任意顺序。
# 你不需要考虑数组中超出新长度后面的元素。
# def removeElement(self, nums: List[int], val: int) -> int:


# 思路：这道题的解法和26的原地删除重复项很相似, 甚至更加简单,
# 由于不像原地删除重复项的要求的值会一直变化, 所以这里的数组不需要是
# 有序的, 只要使用快慢指针, 让快指针先跑, 把合乎要求的值，放到慢指针的
# 位置, 这样慢指针部分的值, 就全部都不为value了
# 注意, 这里和原地删除重复项有少许不同, 这里的慢指针是指向将要被更改的位置
# 所以这里return 慢指针的索引就是正确的答案了


class Solution:
    def removeElement(self, nums, val):
        i = 0
        for j in range(len(nums)):
            if nums[j] != val:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
        return i
