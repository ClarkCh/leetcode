# 给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。
# 按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：
# "123"
# "132"
# "213"
# "231"
# "312"
# "321"
# 给定 n 和 k，返回第 k 个排列。
# 说明：
# 给定 n 的范围是 [1, 9]。
# 给定 k 的范围是[1,  n!]。
# 示例 1:
# 输入: n = 3, k = 3
# 输出: "213"
# 示例 2:
# 输入: n = 4, k = 9
# 输出: "2314"
# def getPermutation(self, n: int, k: int) -> str:


# 思路：明显可以使用回溯法边遍历边记数，
# 但是回溯明显没有规律厉害，所以写规律


class Solution:
    def getPermutation(self, n, k):
        dp = [1] * 10  # 阶乘搜索表
        dp2 = [str(i) for i in range(10)]  # 数字所用数组
        for i in range(1, n + 1):
            dp[i] = dp[i - 1] * i
        for i in range(1, 10):
            if k <= dp[i]:
                level = i
                break
        string = ''
        real = 1
        for i in range(1, n - level + 1):
            string += str(i)
            real += 1
        rel = n - level + 1
        while level > 0:
            total = -1
            while k > 0:
                k = k - dp[level - 1]
                total += 1
            k = k + dp[level - 1]
            level -= 1
            string += dp2[rel + total]
            dp2.insert(real, dp2.pop(rel + total))
            rel += 1
            real += 1
        return string
