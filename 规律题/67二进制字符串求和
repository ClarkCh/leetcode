# 给定两个二进制字符串，返回他们的和（用二进制表示）。
# 输入为非空字符串且只包含数字 1 和 0。
# 示例 1:
# 输入: a = "11", b = "1"
# 输出: "100"
# 示例 2:
# 输入: a = "1010", b = "1011"
# 输出: "10101"
# def addBinary(self, a: str, b: str) -> str:


# 思路：由于最后要返回的是二进制形式的字符串, 所以可以不需要进行二进制和
# 十进制的转换, 所以我将制作一个字典进行转换


class Solution:
    def addBinary(self, a, b):
        dct = {'0': 0, '1': 1, 0: ('0', 0), 1: ('1', 0), 2: ('0', 1), 3: ('1', 1)}
        size1 = len(a)
        size2 = len(b)
        if size1 < size2:
            a = '0' * (size2 - size1) + a
        else:
            b = '0' * (size1 - size2) + b
        lst = ['0']
        rec = 0
        for i in range(1, len(a)+1):
            temp, rec = dct[dct[a[-i]] + rec + dct[b[-i]]]
            lst.insert(0, temp)
        lst.pop()
        if rec:
            lst.insert(0, '1')
        return ''.join(lst)
