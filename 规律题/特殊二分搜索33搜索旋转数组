# 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
# ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
# 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
# 你可以假设数组中不存在重复的元素。
# 你的算法时间复杂度必须是 O(log n) 级别。
# 示例 1:
# 输入: nums = [4,5,6,7,0,1,2], target = 0
# 输出: 4
# 示例 2:
# 输入: nums = [4,5,6,7,0,1,2], target = 3
# 输出: -1
# def search(self, nums: List[int], target: int) -> int:


# 思路：由于题目要求时间复杂度logN, 所以很大可能是使用二分搜索了
# 接下来分析一下这个被旋转过后的有序数组的特点：1)首位l应该比末位r大
# 2)如果以二分搜索的操作来尝试, 查找旋转后的数组的中值, 判断中值如果大于r的值,说明
# 旋转点在右侧, 如果大于l的值, 说明旋转点在左侧, 接下来判断
# 找的值是大于首位小于中值还是……将获得下一个更小的范围, 递归进行上面的那种二分搜索, 直至符合终止条件
# 虽然写起来很长, 但是击败98.96, 还可以


class Solution:
    def search(self, nums, target):
        if nums == []:
            return -1
        size = len(nums)
        return self.binarysearch(nums, 0, size - 1, target)

    def binarysearch(self, nums, l, r, target):  # [l, r]左闭右闭, 特殊二分搜索
        if r - l < 2: # 如果元素个数少于3个直接遍历
            for i in range(l, r + 1):
                if nums[i] == target:
                    return i
            return -1
        mid = int((l + r) / 2)  # 中间偏右
        if nums[mid] == target:
            return mid
        if nums[l] == target:
            return l
        if nums[mid] > nums[l]:  # 旋转点在右侧
            if target > nums[mid]:
                return self.binarysearch(nums, mid + 1, r, target)
            else:
                if target >= nums[l]:
                    return self.helper(nums, l, mid - 1, target)
                else:
                    return self.binarysearch(nums, mid + 1, r, target)
        else:  # 旋转点在左侧
            if target > nums[mid]:
                if target <= nums[l]:
                    return self.helper(nums, mid + 1, r, target)
                else:
                    return self.binarysearch(nums, l, mid - 1, target)
            else:
                return self.binarysearch(nums, l, mid - 1, target)

    def helper(self, nums, l, r, target):  # 普通二分搜索
        if l > r:
            return -1
        if l == r and target == nums:
            return l
        mid = int((l + r) / 2)
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            return self.helper(nums, mid + 1, r, target)
        else:
            return self.helper(nums, l, mid - 1, target)
