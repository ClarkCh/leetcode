# 给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。
# 在杨辉三角中，每个数是它左上方和右上方的数的和。
# 示例:
# 输入: 5
# 输出:
# [
#      [1],
#     [1,1],
#    [1,2,1],
#   [1,3,3,1],
#  [1,4,6,4,1]
# ]
# def generate(self, numRows: int) -> List[List[int]]:


# 思路：直接制作一个拥有第一行答案的列表, 然后从第二行开始
# 默认创建一个拥有两个1值的列表, 如果当前行超过2, 则用上一行的对应索引和索引-1的值求和
# 直至完全填充numrows行


class Solution:
    def generate(self, numRows):
        if numRows == 0:
            return []
        dp = [[1]]
        for i in range(1, numRows):
            lst = [1, 1]
            for j in range(i-1):
                lst.insert(j+1, dp[i-1][j]+dp[i-1][j+1])
            dp.append(lst)
        return dp
